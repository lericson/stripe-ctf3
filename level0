#!/usr/bin/env python2.7

import sys
import re

word_re_sub = re.compile(r'[^ \n]+').sub

class bloom(object):
    def __init__(self, width, n, value=0):
        self.width = width
        self.n = n
        self.value = value

    def update(self, words):
        self.value = self.add_many(self.value, words)

    def add_many(self, value, objs):
        for obj in objs:
            for i in xrange(self.n):
                value |= 1 << hash((i, obj)) % self.width
        return value

    def add(self, value, obj):
        "Update bloom filter *v* with object *o* using *n* hash functions."
        base = hash(obj)
        for i in xrange(self.n):
            value |= 1 << hash((i, base)) % self.width
        return value

    def __contains__(self, obj):
        return self.value | self.add(0, obj)

def words_path(path):
    with open(path) as fp:
        return set(fp.read().split('\n'))

def main(args=sys.argv[1:]):
    words = words_path(args[0] if args else '/usr/share/dict/words')
    word_filter = bloom(8, 1)
    word_filter.update(words)

    def replace(match):
        word = match.group(0)
        word_lower = word.lower()
        if word_lower in word_filter:
            if word_lower in words:
                return word
        return '<' + word + '>'

    sys.stdout.write(word_re_sub(replace, sys.stdin.read()))

if __name__ == "__main__":
    main()
